package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type backupDataSourceData struct {
	Id        types.String `tfsdk:"id"`
	ProjectId string       `tfsdk:"project_id"`
	ClusterId string       `tfsdk:"cluster_id"`
	Page      types.Int64  `tfsdk:"page"`
	PageSize  types.Int64  `tfsdk:"page_size"`
	Items     []backup     `tfsdk:"items"`
	Total     types.Int64  `tfsdk:"total"`
}

type backup struct {
	Id              string `tfsdk:"id"`
	Name            string `tfsdk:"name"`
	Description     string `tfsdk:"description"`
	Type            string `tfsdk:"type"`
	Size            string `tfsdk:"size"`
	CreateTimestamp string `tfsdk:"create_timestamp"`
	Status          string `tfsdk:"status"`
}

// Ensure provider defined types fully satisfy framework interfaces
var _ provider.DataSourceType = backupDataSourceType{}
var _ datasource.DataSource = backupDataSource{}

type backupDataSourceType struct{}

func (t backupDataSourceType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		MarkdownDescription: "backup data source",
		Attributes: map[string]tfsdk.Attribute{
			"id": {
				MarkdownDescription: "ignore it, it is just for test.",
				Computed:            true,
				Type:                types.StringType,
			},
			"project_id": {
				MarkdownDescription: "The ID of the project. You can get the project ID from [tidbcloud_project datasource](../project).",
				Required:            true,
				Type:                types.StringType,
			},
			"cluster_id": {
				MarkdownDescription: "The ID of your cluster.",
				Required:            true,
				Type:                types.StringType,
			},
			"page": {
				MarkdownDescription: "Default:1 The number of pages.",
				Optional:            true,
				Computed:            true,
				Type:                types.Int64Type,
			},
			"page_size": {
				MarkdownDescription: "Default:10 The size of a pages.",
				Optional:            true,
				Computed:            true,
				Type:                types.Int64Type,
			},
			"items": {
				Computed: true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"id": {
						MarkdownDescription: "The ID of the backup. It is generated by TiDB Cloud.",
						Computed:            true,
						Type:                types.StringType,
					},
					"description": {
						MarkdownDescription: "The description of the backup. It is specified by the user when taking a manual type backup. It helps you add additional information to the backup.",
						Computed:            true,
						Type:                types.StringType,
					},
					"name": {
						MarkdownDescription: "The name of the backup.",
						Computed:            true,
						Type:                types.StringType,
					},
					"type": {
						MarkdownDescription: "Enum: MANUAL/AUTO.The type of backup. TiDB Cloud only supports manual and auto backup. For more information, see [TiDB Cloud Documentation](https://docs.pingcap.com/tidbcloud/backup-and-restore#backup).",
						Computed:            true,
						Type:                types.StringType,
					},
					"size": {
						MarkdownDescription: "The bytes of the backup.",
						Computed:            true,
						Type:                types.StringType,
					},
					"create_timestamp": {
						MarkdownDescription: "The creation time of the backup in UTC. The time format follows the ISO8601 standard, which is YYYY-MM-DD (year-month-day) + T +HH:MM:SS (hour-minutes-seconds) + Z. For example, 2020-01-01T00:00:00Z.",
						Computed:            true,
						Type:                types.StringType,
					},
					"status": {
						MarkdownDescription: "Enum: PENDING/RUNNING/FAILED/SUCCESS.The status of backup.",
						Computed:            true,
						Type:                types.StringType,
					},
				}),
			},
			"total": {
				MarkdownDescription: "The total number of backups in the project.",
				Computed:            true,
				Type:                types.Int64Type,
			},
		},
	}, nil
}

func (t backupDataSourceType) NewDataSource(ctx context.Context, in provider.Provider) (datasource.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return backupDataSource{
		provider: provider,
	}, diags
}

type backupDataSource struct {
	provider tidbcloudProvider
}

func (d backupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data backupDataSourceData
	diags := req.Config.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// set default value
	if data.Page.IsNull() || data.Page.IsUnknown() {
		data.Page = types.Int64{Value: 1}
	}
	if data.PageSize.IsNull() || data.PageSize.IsUnknown() {
		data.PageSize = types.Int64{Value: 10}
	}

	tflog.Trace(ctx, "read backup data source")
	backups, err := d.provider.client.GetBackups(data.ProjectId, data.ClusterId, data.Page.Value, data.PageSize.Value)
	if err != nil {
		resp.Diagnostics.AddError("Read Error", fmt.Sprintf("Unable to call GetBackups, got error: %s", err))
		return
	}

	data.Id = types.String{Value: "just for test"}
	data.Total = types.Int64{Value: backups.Total}
	var items []backup
	for _, key := range backups.Items {
		items = append(items, backup{
			Id:              key.Id,
			Description:     key.Description,
			Name:            key.Name,
			Type:            key.Type,
			Size:            key.Size,
			CreateTimestamp: key.CreateTimestamp,
			Status:          key.Status,
		})
	}
	data.Items = items

	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}
