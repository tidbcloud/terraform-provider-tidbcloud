// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dedicated "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/dedicated"
)

// TiDBCloudDedicatedClient is an autogenerated mock type for the TiDBCloudDedicatedClient type
type TiDBCloudDedicatedClient struct {
	mock.Mock
}

// GetRegion provides a mock function with given fields: ctx, regionId
func (_m *TiDBCloudDedicatedClient) GetRegion(ctx context.Context, regionId string) (*dedicated.Commonv1beta1Region, error) {
	ret := _m.Called(ctx, regionId)

	if len(ret) == 0 {
		panic("no return value specified for GetRegion")
	}

	var r0 *dedicated.Commonv1beta1Region
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dedicated.Commonv1beta1Region, error)); ok {
		return rf(ctx, regionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dedicated.Commonv1beta1Region); ok {
		r0 = rf(ctx, regionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dedicated.Commonv1beta1Region)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, regionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloudProviders provides a mock function with given fields: ctx, projectId
func (_m *TiDBCloudDedicatedClient) ListCloudProviders(ctx context.Context, projectId string) ([]dedicated.V1beta1RegionCloudProvider, error) {
	ret := _m.Called(ctx, projectId)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudProviders")
	}

	var r0 []dedicated.V1beta1RegionCloudProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dedicated.V1beta1RegionCloudProvider, error)); ok {
		return rf(ctx, projectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dedicated.V1beta1RegionCloudProvider); ok {
		r0 = rf(ctx, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dedicated.V1beta1RegionCloudProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegions provides a mock function with given fields: ctx, cloudProvider, projectId
func (_m *TiDBCloudDedicatedClient) ListRegions(ctx context.Context, cloudProvider string, projectId string) ([]dedicated.Commonv1beta1Region, error) {
	ret := _m.Called(ctx, cloudProvider, projectId)

	if len(ret) == 0 {
		panic("no return value specified for ListRegions")
	}

	var r0 []dedicated.Commonv1beta1Region
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]dedicated.Commonv1beta1Region, error)); ok {
		return rf(ctx, cloudProvider, projectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []dedicated.Commonv1beta1Region); ok {
		r0 = rf(ctx, cloudProvider, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dedicated.Commonv1beta1Region)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, cloudProvider, projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTiDBCloudDedicatedClient creates a new instance of TiDBCloudDedicatedClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTiDBCloudDedicatedClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TiDBCloudDedicatedClient {
	mock := &TiDBCloudDedicatedClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
