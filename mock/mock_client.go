// Code generated by MockGen. DO NOT EDIT.
// Source: ./tidbcloud/api_client.go

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	backup "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/backup"
	cluster "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/cluster"
	project "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/project"
	restore "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/restore"
	gomock "github.com/golang/mock/gomock"
	import_service "github.com/tidbcloud/terraform-provider-tidbcloud/pkg/import/client/import_service"
)

// MockTiDBCloudClient is a mock of TiDBCloudClient interface.
type MockTiDBCloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockTiDBCloudClientMockRecorder
}

// MockTiDBCloudClientMockRecorder is the mock recorder for MockTiDBCloudClient.
type MockTiDBCloudClientMockRecorder struct {
	mock *MockTiDBCloudClient
}

// NewMockTiDBCloudClient creates a new mock instance.
func NewMockTiDBCloudClient(ctrl *gomock.Controller) *MockTiDBCloudClient {
	mock := &MockTiDBCloudClient{ctrl: ctrl}
	mock.recorder = &MockTiDBCloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiDBCloudClient) EXPECT() *MockTiDBCloudClientMockRecorder {
	return m.recorder
}

// CancelImport mocks base method.
func (m *MockTiDBCloudClient) CancelImport(params *import_service.CancelImportParams, opts ...import_service.ClientOption) (*import_service.CancelImportOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelImport", varargs...)
	ret0, _ := ret[0].(*import_service.CancelImportOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelImport indicates an expected call of CancelImport.
func (mr *MockTiDBCloudClientMockRecorder) CancelImport(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelImport", reflect.TypeOf((*MockTiDBCloudClient)(nil).CancelImport), varargs...)
}

// CreateBackup mocks base method.
func (m *MockTiDBCloudClient) CreateBackup(params *backup.CreateBackupParams, opts ...backup.ClientOption) (*backup.CreateBackupOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackup", varargs...)
	ret0, _ := ret[0].(*backup.CreateBackupOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockTiDBCloudClientMockRecorder) CreateBackup(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockTiDBCloudClient)(nil).CreateBackup), varargs...)
}

// CreateCluster mocks base method.
func (m *MockTiDBCloudClient) CreateCluster(params *cluster.CreateClusterParams, opts ...cluster.ClientOption) (*cluster.CreateClusterOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*cluster.CreateClusterOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockTiDBCloudClientMockRecorder) CreateCluster(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockTiDBCloudClient)(nil).CreateCluster), varargs...)
}

// CreateImport mocks base method.
func (m *MockTiDBCloudClient) CreateImport(params *import_service.CreateImportParams, opts ...import_service.ClientOption) (*import_service.CreateImportOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImport", varargs...)
	ret0, _ := ret[0].(*import_service.CreateImportOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImport indicates an expected call of CreateImport.
func (mr *MockTiDBCloudClientMockRecorder) CreateImport(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImport", reflect.TypeOf((*MockTiDBCloudClient)(nil).CreateImport), varargs...)
}

// CreateRestoreTask mocks base method.
func (m *MockTiDBCloudClient) CreateRestoreTask(params *restore.CreateRestoreTaskParams, opts ...restore.ClientOption) (*restore.CreateRestoreTaskOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRestoreTask", varargs...)
	ret0, _ := ret[0].(*restore.CreateRestoreTaskOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestoreTask indicates an expected call of CreateRestoreTask.
func (mr *MockTiDBCloudClientMockRecorder) CreateRestoreTask(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTask", reflect.TypeOf((*MockTiDBCloudClient)(nil).CreateRestoreTask), varargs...)
}

// DeleteBackup mocks base method.
func (m *MockTiDBCloudClient) DeleteBackup(params *backup.DeleteBackupParams, opts ...backup.ClientOption) (*backup.DeleteBackupOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackup", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockTiDBCloudClientMockRecorder) DeleteBackup(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockTiDBCloudClient)(nil).DeleteBackup), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockTiDBCloudClient) DeleteCluster(params *cluster.DeleteClusterParams, opts ...cluster.ClientOption) (*cluster.DeleteClusterOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*cluster.DeleteClusterOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockTiDBCloudClientMockRecorder) DeleteCluster(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockTiDBCloudClient)(nil).DeleteCluster), varargs...)
}

// GenerateUploadURL mocks base method.
func (m *MockTiDBCloudClient) GenerateUploadURL(params *import_service.GenerateUploadURLParams, opts ...import_service.ClientOption) (*import_service.GenerateUploadURLOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateUploadURL", varargs...)
	ret0, _ := ret[0].(*import_service.GenerateUploadURLOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUploadURL indicates an expected call of GenerateUploadURL.
func (mr *MockTiDBCloudClientMockRecorder) GenerateUploadURL(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUploadURL", reflect.TypeOf((*MockTiDBCloudClient)(nil).GenerateUploadURL), varargs...)
}

// GetBackupOfCluster mocks base method.
func (m *MockTiDBCloudClient) GetBackupOfCluster(params *backup.GetBackupOfClusterParams, opts ...backup.ClientOption) (*backup.GetBackupOfClusterOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupOfCluster", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupOfClusterOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupOfCluster indicates an expected call of GetBackupOfCluster.
func (mr *MockTiDBCloudClientMockRecorder) GetBackupOfCluster(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupOfCluster", reflect.TypeOf((*MockTiDBCloudClient)(nil).GetBackupOfCluster), varargs...)
}

// GetCluster mocks base method.
func (m *MockTiDBCloudClient) GetCluster(params *cluster.GetClusterParams, opts ...cluster.ClientOption) (*cluster.GetClusterOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*cluster.GetClusterOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockTiDBCloudClientMockRecorder) GetCluster(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockTiDBCloudClient)(nil).GetCluster), varargs...)
}

// GetImport mocks base method.
func (m *MockTiDBCloudClient) GetImport(params *import_service.GetImportParams, opts ...import_service.ClientOption) (*import_service.GetImportOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImport", varargs...)
	ret0, _ := ret[0].(*import_service.GetImportOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImport indicates an expected call of GetImport.
func (mr *MockTiDBCloudClientMockRecorder) GetImport(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImport", reflect.TypeOf((*MockTiDBCloudClient)(nil).GetImport), varargs...)
}

// GetRestoreTask mocks base method.
func (m *MockTiDBCloudClient) GetRestoreTask(params *restore.GetRestoreTaskParams, opts ...restore.ClientOption) (*restore.GetRestoreTaskOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestoreTask", varargs...)
	ret0, _ := ret[0].(*restore.GetRestoreTaskOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTask indicates an expected call of GetRestoreTask.
func (mr *MockTiDBCloudClientMockRecorder) GetRestoreTask(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTask", reflect.TypeOf((*MockTiDBCloudClient)(nil).GetRestoreTask), varargs...)
}

// ListBackUpOfCluster mocks base method.
func (m *MockTiDBCloudClient) ListBackUpOfCluster(params *backup.ListBackUpOfClusterParams, opts ...backup.ClientOption) (*backup.ListBackUpOfClusterOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackUpOfCluster", varargs...)
	ret0, _ := ret[0].(*backup.ListBackUpOfClusterOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackUpOfCluster indicates an expected call of ListBackUpOfCluster.
func (mr *MockTiDBCloudClientMockRecorder) ListBackUpOfCluster(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackUpOfCluster", reflect.TypeOf((*MockTiDBCloudClient)(nil).ListBackUpOfCluster), varargs...)
}

// ListClustersOfProject mocks base method.
func (m *MockTiDBCloudClient) ListClustersOfProject(params *cluster.ListClustersOfProjectParams, opts ...cluster.ClientOption) (*cluster.ListClustersOfProjectOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersOfProject", varargs...)
	ret0, _ := ret[0].(*cluster.ListClustersOfProjectOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersOfProject indicates an expected call of ListClustersOfProject.
func (mr *MockTiDBCloudClientMockRecorder) ListClustersOfProject(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersOfProject", reflect.TypeOf((*MockTiDBCloudClient)(nil).ListClustersOfProject), varargs...)
}

// ListImports mocks base method.
func (m *MockTiDBCloudClient) ListImports(params *import_service.ListImportsParams, opts ...import_service.ClientOption) (*import_service.ListImportsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImports", varargs...)
	ret0, _ := ret[0].(*import_service.ListImportsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockTiDBCloudClientMockRecorder) ListImports(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockTiDBCloudClient)(nil).ListImports), varargs...)
}

// ListProjects mocks base method.
func (m *MockTiDBCloudClient) ListProjects(params *project.ListProjectsParams, opts ...project.ClientOption) (*project.ListProjectsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(*project.ListProjectsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockTiDBCloudClientMockRecorder) ListProjects(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockTiDBCloudClient)(nil).ListProjects), varargs...)
}

// ListProviderRegions mocks base method.
func (m *MockTiDBCloudClient) ListProviderRegions(params *cluster.ListProviderRegionsParams, opts ...cluster.ClientOption) (*cluster.ListProviderRegionsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProviderRegions", varargs...)
	ret0, _ := ret[0].(*cluster.ListProviderRegionsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderRegions indicates an expected call of ListProviderRegions.
func (mr *MockTiDBCloudClientMockRecorder) ListProviderRegions(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderRegions", reflect.TypeOf((*MockTiDBCloudClient)(nil).ListProviderRegions), varargs...)
}

// ListRestoreTasks mocks base method.
func (m *MockTiDBCloudClient) ListRestoreTasks(params *restore.ListRestoreTasksParams, opts ...restore.ClientOption) (*restore.ListRestoreTasksOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreTasks", varargs...)
	ret0, _ := ret[0].(*restore.ListRestoreTasksOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreTasks indicates an expected call of ListRestoreTasks.
func (mr *MockTiDBCloudClientMockRecorder) ListRestoreTasks(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTasks", reflect.TypeOf((*MockTiDBCloudClient)(nil).ListRestoreTasks), varargs...)
}

// PreSignedUrlUpload mocks base method.
func (m *MockTiDBCloudClient) PreSignedUrlUpload(url *string, uploadFile *os.File, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreSignedUrlUpload", url, uploadFile, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreSignedUrlUpload indicates an expected call of PreSignedUrlUpload.
func (mr *MockTiDBCloudClientMockRecorder) PreSignedUrlUpload(url, uploadFile, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreSignedUrlUpload", reflect.TypeOf((*MockTiDBCloudClient)(nil).PreSignedUrlUpload), url, uploadFile, size)
}

// UpdateCluster mocks base method.
func (m *MockTiDBCloudClient) UpdateCluster(params *cluster.UpdateClusterParams, opts ...cluster.ClientOption) (*cluster.UpdateClusterOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCluster", varargs...)
	ret0, _ := ret[0].(*cluster.UpdateClusterOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockTiDBCloudClientMockRecorder) UpdateCluster(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockTiDBCloudClient)(nil).UpdateCluster), varargs...)
}
