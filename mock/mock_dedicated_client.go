// Code generated by MockGen. DO NOT EDIT.
// Source: ./tidbcloud/dedicated_api_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dedicated "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/dedicated"
)

// MockTiDBCloudDedicatedClient is a mock of TiDBCloudDedicatedClient interface.
type MockTiDBCloudDedicatedClient struct {
	ctrl     *gomock.Controller
	recorder *MockTiDBCloudDedicatedClientMockRecorder
}

// MockTiDBCloudDedicatedClientMockRecorder is the mock recorder for MockTiDBCloudDedicatedClient.
type MockTiDBCloudDedicatedClientMockRecorder struct {
	mock *MockTiDBCloudDedicatedClient
}

// NewMockTiDBCloudDedicatedClient creates a new mock instance.
func NewMockTiDBCloudDedicatedClient(ctrl *gomock.Controller) *MockTiDBCloudDedicatedClient {
	mock := &MockTiDBCloudDedicatedClient{ctrl: ctrl}
	mock.recorder = &MockTiDBCloudDedicatedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiDBCloudDedicatedClient) EXPECT() *MockTiDBCloudDedicatedClientMockRecorder {
	return m.recorder
}

// ChangeClusterRootPassword mocks base method.
func (m *MockTiDBCloudDedicatedClient) ChangeClusterRootPassword(ctx context.Context, clusterId string, body *dedicated.ClusterServiceResetRootPasswordBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeClusterRootPassword", ctx, clusterId, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeClusterRootPassword indicates an expected call of ChangeClusterRootPassword.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ChangeClusterRootPassword(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeClusterRootPassword", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ChangeClusterRootPassword), ctx, clusterId, body)
}

// CreateAuditLogConfig mocks base method.
func (m *MockTiDBCloudDedicatedClient) CreateAuditLogConfig(ctx context.Context, clusterId string, body *dedicated.Required1) (*dedicated.Dedicatedv1beta1AuditLogConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLogConfig", ctx, clusterId, body)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1AuditLogConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuditLogConfig indicates an expected call of CreateAuditLogConfig.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) CreateAuditLogConfig(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLogConfig", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).CreateAuditLogConfig), ctx, clusterId, body)
}

// CreateAuditLogFilterRule mocks base method.
func (m *MockTiDBCloudDedicatedClient) CreateAuditLogFilterRule(ctx context.Context, clusterId string, body *dedicated.Required2) (*dedicated.V1beta1AuditLogFilterRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLogFilterRule", ctx, clusterId, body)
	ret0, _ := ret[0].(*dedicated.V1beta1AuditLogFilterRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuditLogFilterRule indicates an expected call of CreateAuditLogFilterRule.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) CreateAuditLogFilterRule(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLogFilterRule", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).CreateAuditLogFilterRule), ctx, clusterId, body)
}

// CreateCluster mocks base method.
func (m *MockTiDBCloudDedicatedClient) CreateCluster(ctx context.Context, body *dedicated.TidbCloudOpenApidedicatedv1beta1Cluster) (*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, body)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) CreateCluster(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).CreateCluster), ctx, body)
}

// CreateTiDBNodeGroup mocks base method.
func (m *MockTiDBCloudDedicatedClient) CreateTiDBNodeGroup(ctx context.Context, clusterId string, body *dedicated.Required) (*dedicated.Dedicatedv1beta1TidbNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTiDBNodeGroup", ctx, clusterId, body)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1TidbNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTiDBNodeGroup indicates an expected call of CreateTiDBNodeGroup.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) CreateTiDBNodeGroup(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiDBNodeGroup", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).CreateTiDBNodeGroup), ctx, clusterId, body)
}

// DeleteAuditLogFilterRule mocks base method.
func (m *MockTiDBCloudDedicatedClient) DeleteAuditLogFilterRule(ctx context.Context, clusterId, auditLogFilterRuleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuditLogFilterRule", ctx, clusterId, auditLogFilterRuleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuditLogFilterRule indicates an expected call of DeleteAuditLogFilterRule.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) DeleteAuditLogFilterRule(ctx, clusterId, auditLogFilterRuleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuditLogFilterRule", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).DeleteAuditLogFilterRule), ctx, clusterId, auditLogFilterRuleId)
}

// DeleteCluster mocks base method.
func (m *MockTiDBCloudDedicatedClient) DeleteCluster(ctx context.Context, clusterId string) (*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, clusterId)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) DeleteCluster(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).DeleteCluster), ctx, clusterId)
}

// DeleteTiDBNodeGroup mocks base method.
func (m *MockTiDBCloudDedicatedClient) DeleteTiDBNodeGroup(ctx context.Context, clusterId, nodeGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTiDBNodeGroup", ctx, clusterId, nodeGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTiDBNodeGroup indicates an expected call of DeleteTiDBNodeGroup.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) DeleteTiDBNodeGroup(ctx, clusterId, nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTiDBNodeGroup", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).DeleteTiDBNodeGroup), ctx, clusterId, nodeGroupId)
}

// GetAuditLogConfig mocks base method.
func (m *MockTiDBCloudDedicatedClient) GetAuditLogConfig(ctx context.Context, clusterId string) (*dedicated.Dedicatedv1beta1AuditLogConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogConfig", ctx, clusterId)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1AuditLogConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogConfig indicates an expected call of GetAuditLogConfig.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) GetAuditLogConfig(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogConfig", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).GetAuditLogConfig), ctx, clusterId)
}

// GetAuditLogFilterRule mocks base method.
func (m *MockTiDBCloudDedicatedClient) GetAuditLogFilterRule(ctx context.Context, clusterId, auditLogFilterRuleId string) (*dedicated.V1beta1AuditLogFilterRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogFilterRule", ctx, clusterId, auditLogFilterRuleId)
	ret0, _ := ret[0].(*dedicated.V1beta1AuditLogFilterRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogFilterRule indicates an expected call of GetAuditLogFilterRule.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) GetAuditLogFilterRule(ctx, clusterId, auditLogFilterRuleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogFilterRule", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).GetAuditLogFilterRule), ctx, clusterId, auditLogFilterRuleId)
}

// GetCluster mocks base method.
func (m *MockTiDBCloudDedicatedClient) GetCluster(ctx context.Context, clusterId string) (*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, clusterId)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) GetCluster(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).GetCluster), ctx, clusterId)
}

// GetRegion mocks base method.
func (m *MockTiDBCloudDedicatedClient) GetRegion(ctx context.Context, regionId string) (*dedicated.Commonv1beta1Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, regionId)
	ret0, _ := ret[0].(*dedicated.Commonv1beta1Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) GetRegion(ctx, regionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).GetRegion), ctx, regionId)
}

// GetTiDBNodeGroup mocks base method.
func (m *MockTiDBCloudDedicatedClient) GetTiDBNodeGroup(ctx context.Context, clusterId, nodeGroupId string) (*dedicated.Dedicatedv1beta1TidbNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTiDBNodeGroup", ctx, clusterId, nodeGroupId)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1TidbNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTiDBNodeGroup indicates an expected call of GetTiDBNodeGroup.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) GetTiDBNodeGroup(ctx, clusterId, nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiDBNodeGroup", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).GetTiDBNodeGroup), ctx, clusterId, nodeGroupId)
}

// ListAuditLogFilterRules mocks base method.
func (m *MockTiDBCloudDedicatedClient) ListAuditLogFilterRules(ctx context.Context, clusterId string, pageSize *int32, pageToken *string) (*dedicated.V1beta1ListAuditLogFilterRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogFilterRules", ctx, clusterId, pageSize, pageToken)
	ret0, _ := ret[0].(*dedicated.V1beta1ListAuditLogFilterRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogFilterRules indicates an expected call of ListAuditLogFilterRules.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ListAuditLogFilterRules(ctx, clusterId, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogFilterRules", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ListAuditLogFilterRules), ctx, clusterId, pageSize, pageToken)
}

// ListCloudProviders mocks base method.
func (m *MockTiDBCloudDedicatedClient) ListCloudProviders(ctx context.Context, projectId string) ([]dedicated.V1beta1RegionCloudProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudProviders", ctx, projectId)
	ret0, _ := ret[0].([]dedicated.V1beta1RegionCloudProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudProviders indicates an expected call of ListCloudProviders.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ListCloudProviders(ctx, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudProviders", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ListCloudProviders), ctx, projectId)
}

// ListClusters mocks base method.
func (m *MockTiDBCloudDedicatedClient) ListClusters(ctx context.Context, projectId string, pageSize *int32, pageToken *string) (*dedicated.TidbCloudOpenApidedicatedv1beta1ListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, projectId, pageSize, pageToken)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ListClusters(ctx, projectId, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ListClusters), ctx, projectId, pageSize, pageToken)
}

// ListRegions mocks base method.
func (m *MockTiDBCloudDedicatedClient) ListRegions(ctx context.Context, cloudProvider, projectId string) ([]dedicated.Commonv1beta1Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx, cloudProvider, projectId)
	ret0, _ := ret[0].([]dedicated.Commonv1beta1Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ListRegions(ctx, cloudProvider, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ListRegions), ctx, cloudProvider, projectId)
}

// ListTiDBNodeGroups mocks base method.
func (m *MockTiDBCloudDedicatedClient) ListTiDBNodeGroups(ctx context.Context, clusterId string, pageSize *int32, pageToken *string) (*dedicated.Dedicatedv1beta1ListTidbNodeGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTiDBNodeGroups", ctx, clusterId, pageSize, pageToken)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1ListTidbNodeGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTiDBNodeGroups indicates an expected call of ListTiDBNodeGroups.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ListTiDBNodeGroups(ctx, clusterId, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTiDBNodeGroups", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ListTiDBNodeGroups), ctx, clusterId, pageSize, pageToken)
}

// PauseCluster mocks base method.
func (m *MockTiDBCloudDedicatedClient) PauseCluster(ctx context.Context, clusterId string) (*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseCluster", ctx, clusterId)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseCluster indicates an expected call of PauseCluster.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) PauseCluster(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCluster", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).PauseCluster), ctx, clusterId)
}

// ResumeCluster mocks base method.
func (m *MockTiDBCloudDedicatedClient) ResumeCluster(ctx context.Context, clusterId string) (*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeCluster", ctx, clusterId)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeCluster indicates an expected call of ResumeCluster.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) ResumeCluster(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeCluster", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).ResumeCluster), ctx, clusterId)
}

// UpdateAuditLogConfig mocks base method.
func (m *MockTiDBCloudDedicatedClient) UpdateAuditLogConfig(ctx context.Context, clusterId string, body *dedicated.DatabaseAuditLogServiceUpdateAuditLogConfigRequest) (*dedicated.Dedicatedv1beta1AuditLogConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuditLogConfig", ctx, clusterId, body)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1AuditLogConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuditLogConfig indicates an expected call of UpdateAuditLogConfig.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) UpdateAuditLogConfig(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuditLogConfig", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).UpdateAuditLogConfig), ctx, clusterId, body)
}

// UpdateCluster mocks base method.
func (m *MockTiDBCloudDedicatedClient) UpdateCluster(ctx context.Context, clusterId string, body *dedicated.ClusterServiceUpdateClusterRequest) (*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, clusterId, body)
	ret0, _ := ret[0].(*dedicated.TidbCloudOpenApidedicatedv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) UpdateCluster(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).UpdateCluster), ctx, clusterId, body)
}

// UpdateTiDBNodeGroup mocks base method.
func (m *MockTiDBCloudDedicatedClient) UpdateTiDBNodeGroup(ctx context.Context, clusterId, nodeGroupId string, body *dedicated.TidbNodeGroupServiceUpdateTidbNodeGroupRequest) (*dedicated.Dedicatedv1beta1TidbNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTiDBNodeGroup", ctx, clusterId, nodeGroupId, body)
	ret0, _ := ret[0].(*dedicated.Dedicatedv1beta1TidbNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTiDBNodeGroup indicates an expected call of UpdateTiDBNodeGroup.
func (mr *MockTiDBCloudDedicatedClientMockRecorder) UpdateTiDBNodeGroup(ctx, clusterId, nodeGroupId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTiDBNodeGroup", reflect.TypeOf((*MockTiDBCloudDedicatedClient)(nil).UpdateTiDBNodeGroup), ctx, clusterId, nodeGroupId, body)
}
