// Code generated by MockGen. DO NOT EDIT.
// Source: ./tidbcloud/iam_api_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	iam "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/iam"
)

// MockTiDBCloudIAMClient is a mock of TiDBCloudIAMClient interface.
type MockTiDBCloudIAMClient struct {
	ctrl     *gomock.Controller
	recorder *MockTiDBCloudIAMClientMockRecorder
}

// MockTiDBCloudIAMClientMockRecorder is the mock recorder for MockTiDBCloudIAMClient.
type MockTiDBCloudIAMClientMockRecorder struct {
	mock *MockTiDBCloudIAMClient
}

// NewMockTiDBCloudIAMClient creates a new mock instance.
func NewMockTiDBCloudIAMClient(ctrl *gomock.Controller) *MockTiDBCloudIAMClient {
	mock := &MockTiDBCloudIAMClient{ctrl: ctrl}
	mock.recorder = &MockTiDBCloudIAMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiDBCloudIAMClient) EXPECT() *MockTiDBCloudIAMClientMockRecorder {
	return m.recorder
}

// CreateSQLUser mocks base method.
func (m *MockTiDBCloudIAMClient) CreateSQLUser(ctx context.Context, clusterID string, body *iam.ApiCreateSqlUserReq) (*iam.ApiSqlUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSQLUser", ctx, clusterID, body)
	ret0, _ := ret[0].(*iam.ApiSqlUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSQLUser indicates an expected call of CreateSQLUser.
func (mr *MockTiDBCloudIAMClientMockRecorder) CreateSQLUser(ctx, clusterID, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSQLUser", reflect.TypeOf((*MockTiDBCloudIAMClient)(nil).CreateSQLUser), ctx, clusterID, body)
}

// DeleteSQLUser mocks base method.
func (m *MockTiDBCloudIAMClient) DeleteSQLUser(ctx context.Context, clusterID, userName string) (*iam.ApiBasicResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSQLUser", ctx, clusterID, userName)
	ret0, _ := ret[0].(*iam.ApiBasicResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSQLUser indicates an expected call of DeleteSQLUser.
func (mr *MockTiDBCloudIAMClientMockRecorder) DeleteSQLUser(ctx, clusterID, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSQLUser", reflect.TypeOf((*MockTiDBCloudIAMClient)(nil).DeleteSQLUser), ctx, clusterID, userName)
}

// GetSQLUser mocks base method.
func (m *MockTiDBCloudIAMClient) GetSQLUser(ctx context.Context, clusterID, userName string) (*iam.ApiSqlUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLUser", ctx, clusterID, userName)
	ret0, _ := ret[0].(*iam.ApiSqlUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLUser indicates an expected call of GetSQLUser.
func (mr *MockTiDBCloudIAMClientMockRecorder) GetSQLUser(ctx, clusterID, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLUser", reflect.TypeOf((*MockTiDBCloudIAMClient)(nil).GetSQLUser), ctx, clusterID, userName)
}

// ListSQLUsers mocks base method.
func (m *MockTiDBCloudIAMClient) ListSQLUsers(ctx context.Context, clusterID string, pageSize *int32, pageToken *string) (*iam.ApiListSqlUsersRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSQLUsers", ctx, clusterID, pageSize, pageToken)
	ret0, _ := ret[0].(*iam.ApiListSqlUsersRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSQLUsers indicates an expected call of ListSQLUsers.
func (mr *MockTiDBCloudIAMClientMockRecorder) ListSQLUsers(ctx, clusterID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSQLUsers", reflect.TypeOf((*MockTiDBCloudIAMClient)(nil).ListSQLUsers), ctx, clusterID, pageSize, pageToken)
}

// UpdateSQLUser mocks base method.
func (m *MockTiDBCloudIAMClient) UpdateSQLUser(ctx context.Context, clusterID, userName string, body *iam.ApiUpdateSqlUserReq) (*iam.ApiSqlUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSQLUser", ctx, clusterID, userName, body)
	ret0, _ := ret[0].(*iam.ApiSqlUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSQLUser indicates an expected call of UpdateSQLUser.
func (mr *MockTiDBCloudIAMClientMockRecorder) UpdateSQLUser(ctx, clusterID, userName, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSQLUser", reflect.TypeOf((*MockTiDBCloudIAMClient)(nil).UpdateSQLUser), ctx, clusterID, userName, body)
}
