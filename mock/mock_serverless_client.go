// Code generated by MockGen. DO NOT EDIT.
// Source: ./tidbcloud/serverless_api_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	br "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/br"
	branch "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/branch"
	cluster "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/cluster"
	export "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/export"
	imp "github.com/tidbcloud/tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/imp"
)

// MockTiDBCloudServerlessClient is a mock of TiDBCloudServerlessClient interface.
type MockTiDBCloudServerlessClient struct {
	ctrl     *gomock.Controller
	recorder *MockTiDBCloudServerlessClientMockRecorder
}

// MockTiDBCloudServerlessClientMockRecorder is the mock recorder for MockTiDBCloudServerlessClient.
type MockTiDBCloudServerlessClientMockRecorder struct {
	mock *MockTiDBCloudServerlessClient
}

// NewMockTiDBCloudServerlessClient creates a new mock instance.
func NewMockTiDBCloudServerlessClient(ctrl *gomock.Controller) *MockTiDBCloudServerlessClient {
	mock := &MockTiDBCloudServerlessClient{ctrl: ctrl}
	mock.recorder = &MockTiDBCloudServerlessClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiDBCloudServerlessClient) EXPECT() *MockTiDBCloudServerlessClientMockRecorder {
	return m.recorder
}

// CancelExport mocks base method.
func (m *MockTiDBCloudServerlessClient) CancelExport(ctx context.Context, clusterId, exportId string) (*export.Export, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExport", ctx, clusterId, exportId)
	ret0, _ := ret[0].(*export.Export)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelExport indicates an expected call of CancelExport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CancelExport(ctx, clusterId, exportId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CancelExport), ctx, clusterId, exportId)
}

// CancelImport mocks base method.
func (m *MockTiDBCloudServerlessClient) CancelImport(ctx context.Context, clusterId, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelImport", ctx, clusterId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelImport indicates an expected call of CancelImport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CancelImport(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelImport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CancelImport), ctx, clusterId, id)
}

// CancelUpload mocks base method.
func (m *MockTiDBCloudServerlessClient) CancelUpload(ctx context.Context, clusterId string, uploadId *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUpload", ctx, clusterId, uploadId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelUpload indicates an expected call of CancelUpload.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CancelUpload(ctx, clusterId, uploadId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUpload", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CancelUpload), ctx, clusterId, uploadId)
}

// CompleteUpload mocks base method.
func (m *MockTiDBCloudServerlessClient) CompleteUpload(ctx context.Context, clusterId string, uploadId *string, parts *[]imp.CompletePart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteUpload", ctx, clusterId, uploadId, parts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteUpload indicates an expected call of CompleteUpload.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CompleteUpload(ctx, clusterId, uploadId, parts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteUpload", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CompleteUpload), ctx, clusterId, uploadId, parts)
}

// CreateBranch mocks base method.
func (m *MockTiDBCloudServerlessClient) CreateBranch(ctx context.Context, clusterId string, body *branch.Branch) (*branch.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", ctx, clusterId, body)
	ret0, _ := ret[0].(*branch.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CreateBranch(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CreateBranch), ctx, clusterId, body)
}

// CreateCluster mocks base method.
func (m *MockTiDBCloudServerlessClient) CreateCluster(ctx context.Context, req *cluster.TidbCloudOpenApiserverlessv1beta1Cluster) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, req)
	ret0, _ := ret[0].(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CreateCluster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CreateCluster), ctx, req)
}

// CreateExport mocks base method.
func (m *MockTiDBCloudServerlessClient) CreateExport(ctx context.Context, clusterId string, body *export.ExportServiceCreateExportBody) (*export.Export, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExport", ctx, clusterId, body)
	ret0, _ := ret[0].(*export.Export)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExport indicates an expected call of CreateExport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CreateExport(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CreateExport), ctx, clusterId, body)
}

// CreateImport mocks base method.
func (m *MockTiDBCloudServerlessClient) CreateImport(ctx context.Context, clusterId string, body *imp.ImportServiceCreateImportBody) (*imp.Import, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImport", ctx, clusterId, body)
	ret0, _ := ret[0].(*imp.Import)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImport indicates an expected call of CreateImport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) CreateImport(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).CreateImport), ctx, clusterId, body)
}

// DeleteBackup mocks base method.
func (m *MockTiDBCloudServerlessClient) DeleteBackup(ctx context.Context, backupId string) (*br.V1beta1Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", ctx, backupId)
	ret0, _ := ret[0].(*br.V1beta1Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockTiDBCloudServerlessClientMockRecorder) DeleteBackup(ctx, backupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).DeleteBackup), ctx, backupId)
}

// DeleteBranch mocks base method.
func (m *MockTiDBCloudServerlessClient) DeleteBranch(ctx context.Context, clusterId, branchId string) (*branch.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, clusterId, branchId)
	ret0, _ := ret[0].(*branch.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockTiDBCloudServerlessClientMockRecorder) DeleteBranch(ctx, clusterId, branchId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).DeleteBranch), ctx, clusterId, branchId)
}

// DeleteCluster mocks base method.
func (m *MockTiDBCloudServerlessClient) DeleteCluster(ctx context.Context, clusterId string) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, clusterId)
	ret0, _ := ret[0].(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockTiDBCloudServerlessClientMockRecorder) DeleteCluster(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).DeleteCluster), ctx, clusterId)
}

// DeleteExport mocks base method.
func (m *MockTiDBCloudServerlessClient) DeleteExport(ctx context.Context, clusterId, exportId string) (*export.Export, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExport", ctx, clusterId, exportId)
	ret0, _ := ret[0].(*export.Export)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExport indicates an expected call of DeleteExport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) DeleteExport(ctx, clusterId, exportId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).DeleteExport), ctx, clusterId, exportId)
}

// DownloadExportFiles mocks base method.
func (m *MockTiDBCloudServerlessClient) DownloadExportFiles(ctx context.Context, clusterId, exportId string, body *export.ExportServiceDownloadExportFilesBody) (*export.DownloadExportFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadExportFiles", ctx, clusterId, exportId, body)
	ret0, _ := ret[0].(*export.DownloadExportFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadExportFiles indicates an expected call of DownloadExportFiles.
func (mr *MockTiDBCloudServerlessClientMockRecorder) DownloadExportFiles(ctx, clusterId, exportId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadExportFiles", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).DownloadExportFiles), ctx, clusterId, exportId, body)
}

// GetBackup mocks base method.
func (m *MockTiDBCloudServerlessClient) GetBackup(ctx context.Context, backupId string) (*br.V1beta1Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackup", ctx, backupId)
	ret0, _ := ret[0].(*br.V1beta1Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackup indicates an expected call of GetBackup.
func (mr *MockTiDBCloudServerlessClientMockRecorder) GetBackup(ctx, backupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackup", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).GetBackup), ctx, backupId)
}

// GetBranch mocks base method.
func (m *MockTiDBCloudServerlessClient) GetBranch(ctx context.Context, clusterId, branchId string, view branch.BranchServiceGetBranchViewParameter) (*branch.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", ctx, clusterId, branchId, view)
	ret0, _ := ret[0].(*branch.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockTiDBCloudServerlessClientMockRecorder) GetBranch(ctx, clusterId, branchId, view interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).GetBranch), ctx, clusterId, branchId, view)
}

// GetCluster mocks base method.
func (m *MockTiDBCloudServerlessClient) GetCluster(ctx context.Context, clusterId string, view cluster.ServerlessServiceGetClusterViewParameter) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, clusterId, view)
	ret0, _ := ret[0].(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockTiDBCloudServerlessClientMockRecorder) GetCluster(ctx, clusterId, view interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).GetCluster), ctx, clusterId, view)
}

// GetExport mocks base method.
func (m *MockTiDBCloudServerlessClient) GetExport(ctx context.Context, clusterId, exportId string) (*export.Export, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExport", ctx, clusterId, exportId)
	ret0, _ := ret[0].(*export.Export)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExport indicates an expected call of GetExport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) GetExport(ctx, clusterId, exportId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).GetExport), ctx, clusterId, exportId)
}

// GetImport mocks base method.
func (m *MockTiDBCloudServerlessClient) GetImport(ctx context.Context, clusterId, id string) (*imp.Import, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImport", ctx, clusterId, id)
	ret0, _ := ret[0].(*imp.Import)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImport indicates an expected call of GetImport.
func (mr *MockTiDBCloudServerlessClientMockRecorder) GetImport(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImport", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).GetImport), ctx, clusterId, id)
}

// ListBackups mocks base method.
func (m *MockTiDBCloudServerlessClient) ListBackups(ctx context.Context, clusterId *string, pageSize *int32, pageToken *string) (*br.V1beta1ListBackupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", ctx, clusterId, pageSize, pageToken)
	ret0, _ := ret[0].(*br.V1beta1ListBackupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListBackups(ctx, clusterId, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListBackups), ctx, clusterId, pageSize, pageToken)
}

// ListBranches mocks base method.
func (m *MockTiDBCloudServerlessClient) ListBranches(ctx context.Context, clusterId string, pageSize *int32, pageToken *string) (*branch.ListBranchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx, clusterId, pageSize, pageToken)
	ret0, _ := ret[0].(*branch.ListBranchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListBranches(ctx, clusterId, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListBranches), ctx, clusterId, pageSize, pageToken)
}

// ListClusters mocks base method.
func (m *MockTiDBCloudServerlessClient) ListClusters(ctx context.Context, filter *string, pageSize *int32, pageToken, orderBy *string, skip *int32) (*cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, filter, pageSize, pageToken, orderBy, skip)
	ret0, _ := ret[0].(*cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListClusters(ctx, filter, pageSize, pageToken, orderBy, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListClusters), ctx, filter, pageSize, pageToken, orderBy, skip)
}

// ListExportFiles mocks base method.
func (m *MockTiDBCloudServerlessClient) ListExportFiles(ctx context.Context, clusterId, exportId string, pageSize *int32, pageToken *string, isGenerateUrl bool) (*export.ListExportFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportFiles", ctx, clusterId, exportId, pageSize, pageToken, isGenerateUrl)
	ret0, _ := ret[0].(*export.ListExportFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExportFiles indicates an expected call of ListExportFiles.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListExportFiles(ctx, clusterId, exportId, pageSize, pageToken, isGenerateUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportFiles", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListExportFiles), ctx, clusterId, exportId, pageSize, pageToken, isGenerateUrl)
}

// ListExports mocks base method.
func (m *MockTiDBCloudServerlessClient) ListExports(ctx context.Context, clusterId string, pageSize *int32, pageToken, orderBy *string) (*export.ListExportsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExports", ctx, clusterId, pageSize, pageToken, orderBy)
	ret0, _ := ret[0].(*export.ListExportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListExports(ctx, clusterId, pageSize, pageToken, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListExports), ctx, clusterId, pageSize, pageToken, orderBy)
}

// ListImports mocks base method.
func (m *MockTiDBCloudServerlessClient) ListImports(ctx context.Context, clusterId string, pageSize *int32, pageToken, orderBy *string) (*imp.ListImportsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImports", ctx, clusterId, pageSize, pageToken, orderBy)
	ret0, _ := ret[0].(*imp.ListImportsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListImports(ctx, clusterId, pageSize, pageToken, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListImports), ctx, clusterId, pageSize, pageToken, orderBy)
}

// ListProviderRegions mocks base method.
func (m *MockTiDBCloudServerlessClient) ListProviderRegions(ctx context.Context) ([]cluster.Commonv1beta1Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderRegions", ctx)
	ret0, _ := ret[0].([]cluster.Commonv1beta1Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderRegions indicates an expected call of ListProviderRegions.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ListProviderRegions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderRegions", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ListProviderRegions), ctx)
}

// PartialUpdateCluster mocks base method.
func (m *MockTiDBCloudServerlessClient) PartialUpdateCluster(ctx context.Context, clusterId string, body *cluster.V1beta1ServerlessServicePartialUpdateClusterBody) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateCluster", ctx, clusterId, body)
	ret0, _ := ret[0].(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdateCluster indicates an expected call of PartialUpdateCluster.
func (mr *MockTiDBCloudServerlessClientMockRecorder) PartialUpdateCluster(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateCluster", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).PartialUpdateCluster), ctx, clusterId, body)
}

// ResetBranch mocks base method.
func (m *MockTiDBCloudServerlessClient) ResetBranch(ctx context.Context, clusterId, branchId string) (*branch.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetBranch", ctx, clusterId, branchId)
	ret0, _ := ret[0].(*branch.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetBranch indicates an expected call of ResetBranch.
func (mr *MockTiDBCloudServerlessClientMockRecorder) ResetBranch(ctx, clusterId, branchId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBranch", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).ResetBranch), ctx, clusterId, branchId)
}

// Restore mocks base method.
func (m *MockTiDBCloudServerlessClient) Restore(ctx context.Context, body *br.V1beta1RestoreRequest) (*br.V1beta1RestoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, body)
	ret0, _ := ret[0].(*br.V1beta1RestoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockTiDBCloudServerlessClientMockRecorder) Restore(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).Restore), ctx, body)
}

// StartUpload mocks base method.
func (m *MockTiDBCloudServerlessClient) StartUpload(ctx context.Context, clusterId string, fileName, targetDatabase, targetTable *string, partNumber *int32) (*imp.StartUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUpload", ctx, clusterId, fileName, targetDatabase, targetTable, partNumber)
	ret0, _ := ret[0].(*imp.StartUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartUpload indicates an expected call of StartUpload.
func (mr *MockTiDBCloudServerlessClientMockRecorder) StartUpload(ctx, clusterId, fileName, targetDatabase, targetTable, partNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpload", reflect.TypeOf((*MockTiDBCloudServerlessClient)(nil).StartUpload), ctx, clusterId, fileName, targetDatabase, targetTable, partNumber)
}
